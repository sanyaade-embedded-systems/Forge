HYPER-C: SUPPORTED HYPERTALK SYNTAX
-----------------------------------

Currently, HyperC supports the following HyperTalk syntax:

1) TOP-LEVEL CONSTRUCTS:

	on handlerName [<paramName1>[,<paramName2>[, ...]]
		commands
	end handlerName

This defines a command handler with the specified number of parameters that are
automatically assigned to the local variables of that name.

	function handlerName [<paramName1>[,<paramName2>[, ...]]
		commands
	end handlerName

This defines a function handler.


2) COMMANDS:

	handlerName [<param1>[,<param2>[,...]]]

This is the command that calls a command handler. The parameter values passed in
may be any valid expression. If you specify an at sign ("@") followed by a variable
name, as a parameter, that variable will be passed by reference, that is, any changes
made to it inside the handler will be applied to the variable in the script that
called the handler as well. Currently, there's one built-in handler:

	do <messageString>	-- send the specified message to the current card.
							(may not be available with all templates, but is
							available for XCMDs of all kinds)

Which you call just like any other handler.

	put <expression> into <variableName>

This stores the value of the specified expression in the variable with the
specified name. If there is no variable of that name yet, it is created. There
are also put X after Y for appending Y to X, and put X before Y for prefixing
Y with X.

	put <expression>

Outputs the specified expression as a string to the console.

	return <expression>

This sets the return value of the current handler to the value of the specified
expression and exits the current handler.

	delete <container>

This empties the specified container. For whole values, this means they get
turned into an empty string. If you pass a chunk here, the specified range will
be deleted from the target container, in addition with any appropriate delimiters.
If you do not wish to delete the delimiters, use 'put empty into <container>'
instead.

	add <expression> to <container>
	subtract <expression> from <container>
	
These commands add/subtract the specified numeric expression to/from the numbers
in a container and store the result in the container.

	multiply <container> with <expression>
	divide <container> by <expression>

These commands multiply/divide the number in the specified container with/by the
numeric expression provided.

	repeat while <conditionExpression>
		commands
	end repeat

This executes the commands repeatedly while the value of <conditionExpression>
is "true". If conditionExpression starts out false, this executes no commands
apart from evaluating the expression.

	repeat until <conditionExpression>
		commands
	end repeat

This basically loops while the conditionExpression is false.

	repeat [for] <count> [times]
		commands
	end repeat

This repeats the specified commands <count> times.

	repeat with <variableName> from <startNum> [down] to <endNum>
		commands
	end repeat

puts each number from startNum to endNum into the variable and executes the
commands for each one of them.

	private global <variableName>

Creates a new global variable named <variableName>. All handlers that introduce
a global variable of a particular name will share this variable. Also, this
variable will persist for the entire time the program is loaded. So, if you are
running a script as a plugin, e.g. in SuperCard, the value of the global
variable will stay available until SuperCard is quit. Note that host
applications like SuperCard can't see these global variables, they are only
visible inside the program. Hence the "private" keyword.

3) EXPRESSIONS:

An expression consists of either a single term, or two or more terms ("operands")
chained together using operators.

Supported operators at this time are:

	+  - Add the two operands.
	-  - Subtract the second operand from the first one.
	*  - Multiply the two operands.
	/  - Divide the first operand by the second one.
	=  - compare the two operands. This tries to do int/int, float/float or
		bool/bool comparisons before it falls back on case-insensitive string
		comparison.
	<> - compare the two operands, returning FALSE if they are equal and TRUE
		if they are not equal.
	is - alternate spelling for =.
	is not - alternate spelling for <>
	<  - compare the two operands and return TRUE if the first one is less than
		the second one, FALSE otherwise. For numbers, this compares their numeric
		value, for strings their sort order. I.e. Aa < Ab.
	>  - compare the two operands and return TRUE if the first one is more than
		the second one, FALSE otherwise. For numbers, this compares their numeric
		value, for strings their sort order. I.e. Ab > Aa.
	<= - compare the two operands and return TRUE if the first one is less than
		or equal to the second one, FALSE otherwise. For numbers, this compares
		their numeric value, for strings their sort order. I.e. Aa <= Ab,
		Aa <= Aa.
	>= - compare the two operands and return TRUE if the first one is more than
		or equal to the second one, FALSE otherwise. For numbers, this compares
		their numeric value, for strings their sort order. I.e. Ab >= Aa,
		Aa >= Aa.
	mod[ulo] - Return the remainder that occurs when dividing the first operand
		by the second.
	^  - Raise the first exponent to the power of the second. i.e. 2 ^ 3 = 8
	
	& - Convert the operands to strings and append the second one to the first one.
	&& - Like &, but inserts a space between the two strings.

4) TERMS:

A term can be either a quoted string literal, an unquoted string literal,
a variable name, an integer, or a function call.

	"This is a String"

This is a string. It may contain spaces and other odd characters, but it may not
contain any quote characters.

	foobar

This is an unquoted string literal. An unquoted string literal must adhere to
the same rules as any valid identifier (i.e. handler name or so). In particular,
it may not contain spaces or other punctuation. Note that if an unquoted string
literal's name collides with a variable name, it will be reinterpreted as a
variable name as soon as something has been put into the variable of that name
(i.e. as soon as the variable has been created). In fact, all unquoted string
literals are simply variables that are initialised with their name as their value.

	myVariable

A variable name must also be a valid identifier. If you use a variable name
before something has been put into it, it is treated as an unquoted string
literal.

	the result
	
The Result is a special variable that holds the return value from the last
handler that's been called in the current function.

	123

This is an integer. An integer may only consist of the digits 1 through 9 and 0.

	123.456

This is a fractional number. A fractional number may consist of the digits 1
through 9, 0, and of a single decimal point.

	myFunction( [<param1>[, <param2>[, ...]]] )

A function call works the same as a handler call. It may take parameters. The
return value of the function will be used as the value of this term when it is
used in an expression. Currently, there are the following built-in functions:

	isset( <variable> ) -- returns TRUE if a parameter was actually set,
							FALSE if not. You can also use the value "unset" to
							compare against, but note that comparing unset values
							to an empty string will always return that they're
							equal. So, if you have a variable that may contain
							an empty string, use isset(theStr) to find out if
							it's unset, not 'if theStr is unset then ...'.
	value( <string> ) -- sends the specified string to SuperCard to be evaluated
							and returns the result as a string.
	numToChar( <integer> ) -- returns the character with the specified ASCII value.
	charToNum( <integer> ) -- returns the ASCII value of the specified character.
	round( <number> ) -- rounds the specified number to the nearest integer.
	trunc( <number> ) -- strips any fractional part off a number, leaving only
							an integer.
	offset( <needle>, <haystack>[, <startOffset>] ) -- finds the string needle
							in haystack and returns at what character of haystack
							needle starts. Optionally, you can tell it to skip a
							certain number of characters at the start.
	paramCount() -- the number of parameters passed into the current handler.
	param( <n> ) -- returns the value of the nTh parameter passed
							to the current handler.
	abs( <number> ) -- returns the absolute value of a number (i.e. without any
							leading minus sign).
	sqrt( <number> ) -- returns the square root of the specified number.
	average( <number1>[, <number2>[, ...]] ) -- returns the average of the
							specified numbers. There's also a short form "avg".
	sum( <number1>[, <number2>[, ...]] ) -- returns the sum of the
							specified numbers.
	minimum( <number1>[, <number2>[, ...]] ) -- returns the smallest of the
							specified numbers. There's also a short form "min".
	maximum( <number1>[, <number2>[, ...]] ) -- returns the largest of the
							specified numbers. There's also a short form "max".
	isNumber( <expression> ) -- returns whether the specified value is a number
							of any kind.
	length( <text> ) -- measures the length in characters of the text
							representation of the value passed. There's also
							a short form "len" of this function.
	random( <maxNum> ) -- returns a number between 1 and maxNum, which can
							include 1 and maxNum.
	HFSToPOSIX( <path> ) -- converts a Mac-style, colon-separated pathname to
							a Unix-style POSIX pathname. (only available on MacOS)
	POSIXToHFS( <path> ) -- converts a Unix-style, slash-separated pathname to
							a Mac-style HFS pathname. (only available on MacOS)
	
You can call these functions just like any other function. Some templates may
include additional functions. E.g. the XCMD templates provide a
value(<expressionString>) function that sends a string to the host application
to evaluate.

	the paramCount
	
Alternate spelling for paramCount().

	parameter <n>
	
The value of the nTh parameter passed to the current handler. Alternate spelling
for the param() function.

	char[acter][s] <startOffsetExpr> [to <endOffsetExpr>] of <term>
	line[s] <startOffsetExpr> [to <endOffsetExpr>] of <term>
	item[s] <startOffsetExpr> [to <endOffsetExpr>] of <term>
	word[s] <startOffsetExpr> [to <endOffsetExpr>] of <term>

Extracts a chunk (aka substring) from the specified term. Items are comma-delimited,
lines are return-delimited. Words are delimited by one or more characters of whitespace.
You can also change the value of a chunk.

	number of char[acter]s of <expression>
	number of lines of <expression>
	number of items of <expression>
	number of words of <expression>

Counts the number of entities of the specified chunk type that can be extracted
from the specified expression. 

	id of function [handler] <handlerName>
	id of [message] handler <handlerName>
	
Returns an internal object representing a particular handler in the script
being compiled. The only place you should use this is wherever a ProcPtr,
function pointer or "UPP" is asked for by a particular native system function.
Once the native system function has the ID of a handler, it can use that to
call your handler, and thus notify you of things that happen inside the system.

	[ClassName methodName]
	[ClassName paramLabel1: <param1> [paramLabel2: <param2 [...]]]

This is an Objective-C class method call. If you use this, HyperC will compile as
Objective C code and include the HyperC_ObjectiveCLib header and library and
Foundation.framework. Note that you have to be very careful when using this.
While HyperC can find out some things about the method being called, it doesn't
know about Objective C objects or memory management. So, you're essentially
coding Objective C, with all the dangers that implies.

HyperC will convert certain ObjC types of data to their HyperC equivalents and
back, where possible. E.g. if you pass a string to a method that takes an
NSString*, HyperC will create a temporary NSString behind the scenes. Similarly,
it knows about char*, NSNumber and many of the integers, booleans and
floating point numbers. It will also turn a char back into a string or hand a
string's first character off when a char is requested. However, this doesn't
work yet for sending messages directly to an object, as the receiver of a
message is currently just an "id", and thus HyperC doesn't know what to convert
a value you pass it to. However, since most constructors are also declared to
return an "id", you can directly call the constructor of a class to convert a
value to the appropriate object value. For the same reason, it is not quite
trivial to get a string out of an NSDictionary either, but it can be done via
the UTF8String method.

All objects and pointers HyperC doesn't know about (including SEL, id and Class)
are represented by an opaque object reference that can't be turned into any
other data type.

	[varName methodName]
	[varName paramLabel1: <param1> [paramLabel2: <param2 [...]]]
	
This is an instance method call. varName must contain an opaque reference to an
Objective C object previously created with another Objective C call. The message
will then be dispatched to that object.

	constant
	
There are several constants whose name consists of a single identifier:

	true
	false
	return		-- the return character, numToChar(13), also available under the
					shorter "cr" name.
	lineFeed	-- the Unix newline character, numToChar(10), also available
					under the name "newline".
	unset		-- a value that contains an unset value. isset(unset) always
					returns FALSE.
	empty		-- an empty string. Equivalent to "".
	quote		-- the quote character (")
	comma		-- the comma character (,)
	colon		-- the colon character (:)
	null		-- the NUL character, numToChar(0)
	space		-- the space character (" "), numToChar(32)
	tab			-- the tabulator character, numToChar(9)
	pi			-- the number "pi". Roughly 3.14
	nullPointer	-- a system object with the address 0, usually used to indicate
					an invalid, unspecified or unset object. In C documentation
					this is generally referred to as NULL or NIL.
	
