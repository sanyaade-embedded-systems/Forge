 √ Support 'put "x" into item n of str' where the number of items in str is
	n-1 or less.

 √  When inserting into the last item, don't append another comma.
 
 √  Find out why testfile4.hc doesn't work. It should.
 
 -> Make sure we raise "not a number" errors as appropriate.

 -> Generate NS_DURING/NS_HANDLER/NS_ENDHANDLER around all Cocoa calls somehow.

 -> Write some code to allow feeding files with transformations to apply to
	frameworkheaders.hhc into HyperC. One would be a transformation list provided
	by me, while a second could contain user overrides. That way we get automatic
	processing of headers, manual corrections, *and* users can add their own junk
	without having to modify any "system" files.

 -> Also support transformation files telling us about framework umbrella
	headers that don't have the framework name (e.g. NSMailDelivery). This could
	be done by adding the framework header name to frameworkheaders.hhc and thus
	making HyperC actually *know* what framework a particular call belongs to and
	it could transparently include and link that. OTOH methods defined in several
	objects would then be problematic, as it might pull in unrelated frameworks.
	However, for classes this could be decided pretty safely, and if a method
	is defined for a framework that we already included for a class, we could
	just ignore the include there.

 ->	Make headerimport.php support unlabeled params.
 -> Make headerimport.php support classes without a superclass.

  √ Support variable parameter counts, maybe base that on a list data type?
 
  √ Support list data types.

  √ Make HyperC work even if current directory isn't the one containing
	framework headers etc.
	
 -> Move all support files into a single folder so it's easy to keep them around.
 
 -> Allow specifying a custom folder to use for support files.

 -> Support associative arrays.

 -> Support several frameworkheaders.hhc files, not just one, so users can
	add their own frameworks or so.

 -> Add a way to limit what classes from frameworkheaders.hhc can be used,
	to allow for a demo version with limited external calls.

  √ Add support for native function calls (map them to command and function
	handlers). Only implemented function handlers right now, where void returns "".

 -> Add support for enums (just translate unknown identifiers into their
	values).

 -> Add support for Cocoa-style constants (i.e. globals containing objects).

 -> Can we add support for #defines or does our preprocessor run already
	eat those?

 -> Add support for structs (needs associative arrays to work, which would
	then get translated into the actual data structure.

 -> Add support for output parameters in native function and method calls.
	These may need special mark-up in frameworkheaders.hhc.

  √ Find out why ABAddressBook sharedAddressBook returns NULL.

  √ Add low-level functions like charToNum()/numToChar().

 -> Add "[the] funcName of <param1>" as alternate spelling for funcName(<param1>) 

  √ Add chunk expressions.

 -> Add "create" command for folders etc.

 -> Add simple dialog-showing commands.

 -> Find out how to do nice text callbacks like CompileIt had them.

 -> Add code for supporting system callbacks. Maybe a special qualifier or
	a handlerToFunction() function or so that generates a signature matching the
	needed signature?

 -> Add a way to declare handlers for export and with a particular name
	that isn't prefixed with fun_ or hdl_.

 -> Allow declaring action methods. An easy solution would be just
	treating the whole script as one object (using the proper template)
	and then making us a method on that object and allowing for the use
	of "me" to refer to this object. Make sure this is consistent with
	system callbacks.

 -> Make sure we can cope with special characters and spaces in paths!

 -> Keep track of used, unused, implemented and unimplemented handlers. If any
	handlers are used that aren't implemented in the script, create a #define
	for that handler name to map it to a function that sends the call to "do",
	so it gets sent to SuperCard.

 √ Move main function into a template file and add new templates for stuff
	like PrefPanes.

 √ Redo memory management: We need nested pools to which a variant gets added
	so we can flush a loop-specific pool and thus dispose of the loop condition's
	intermediate values each time through the loop instead of overwriting the
	variable each time and leaking horribly.
	Solved this by simply letting C++ take care of the chores for me.

 √ Parameters aren't copied to local variables. Thus, when you assign to them,
	they free their previous contents (which the caller owns) and cause stuff
	to go wrong :-(

 √ Find out why addressBook->me->description returns TRUE ?!